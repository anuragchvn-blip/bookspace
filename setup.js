#!/usr/bin/env node

/**
 * BookSpace Quick Start Script
 * 
 * This script helps you set up BookSpace development environment
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function main() {
  console.log('\nüöÄ Welcome to BookSpace Setup!\n');
  console.log('This script will help you configure your environment.\n');

  // Check if .env exists
  const envPath = path.join(__dirname, '.env');
  const envExamplePath = path.join(__dirname, '.env.example');

  if (fs.existsSync(envPath)) {
    const overwrite = await question('.env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('\n‚úÖ Using existing .env file\n');
      rl.close();
      return;
    }
  }

  console.log('\nüìù Please provide the following information:\n');

  // Gather configuration
  const config = {
    NEXT_PUBLIC_POLYGON_RPC_URL: await question('Polygon RPC URL (default: https://rpc-mumbai.maticvigil.com): ') || 'https://rpc-mumbai.maticvigil.com',
    NEXT_PUBLIC_PINATA_JWT: await question('Pinata JWT Token: '),
    NEXT_PUBLIC_PINATA_API_KEY: await question('Pinata API Key: '),
    NEXT_PUBLIC_PINATA_SECRET_KEY: await question('Pinata Secret Key: '),
    NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: await question('WalletConnect Project ID (optional): '),
    PRIVATE_KEY: await question('Your wallet private key (for deployment, without 0x): '),
  };

  // Create .env content
  const envContent = `# Auto-generated by setup script

# Polygon Configuration
NEXT_PUBLIC_POLYGON_RPC_URL=${config.NEXT_PUBLIC_POLYGON_RPC_URL}
NEXT_PUBLIC_POLYGON_CHAIN_ID=80001

# Contract Addresses (will be filled after deployment)
NEXT_PUBLIC_BOOKMARK_REGISTRY_ADDRESS=
NEXT_PUBLIC_DM_REGISTRY_ADDRESS=

# Solana Configuration
NEXT_PUBLIC_SOLANA_RPC_URL=https://api.devnet.solana.com
NEXT_PUBLIC_SOLANA_NETWORK=devnet
NEXT_PUBLIC_TIP_PROGRAM_ID=

# IPFS/Pinata Configuration
NEXT_PUBLIC_PINATA_API_KEY=${config.NEXT_PUBLIC_PINATA_API_KEY}
NEXT_PUBLIC_PINATA_SECRET_KEY=${config.NEXT_PUBLIC_PINATA_SECRET_KEY}
NEXT_PUBLIC_PINATA_JWT=${config.NEXT_PUBLIC_PINATA_JWT}
NEXT_PUBLIC_PINATA_GATEWAY=https://gateway.pinata.cloud

# WalletConnect
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=${config.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID}

# Deployment Private Key
# ‚ö†Ô∏è NEVER COMMIT THIS FILE TO GIT ‚ö†Ô∏è
PRIVATE_KEY=${config.PRIVATE_KEY}
`;

  // Write .env file
  fs.writeFileSync(envPath, envContent);

  console.log('\n‚úÖ .env file created successfully!\n');
  console.log('üìã Next steps:\n');
  console.log('1. Run: npm install');
  console.log('2. Run: npm run compile');
  console.log('3. Get testnet tokens:');
  console.log('   - Polygon MATIC: https://faucet.polygon.technology/');
  console.log('   - Solana SOL: https://faucet.solana.com/');
  console.log('4. Run: npm run deploy:polygon');
  console.log('5. Update .env with deployed contract addresses');
  console.log('6. Run: npm run dev\n');
  console.log('üéâ Happy coding!\n');

  rl.close();
}

main().catch(console.error);
